#!/usr/bin/env python3
"""
Script to export all database data to SQL file
"""
import os
import sys
from datetime import datetime
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# Add the BE-farm directory to Python path
sys.path.append(os.path.join(os.path.dirname(__file__), 'BE-farm'))

from database import Base, engine
from models.core import *
from models.lookup import *
from models.wagtail_images import *

def get_table_names():
    """Get all table names from the database"""
    with engine.connect() as conn:
        result = conn.execute(text("""
            SELECT tablename
            FROM pg_tables
            WHERE schemaname = 'public'
            ORDER BY tablename
        """))
        return [row[0] for row in result]

def export_table_data(table_name):
    """Export data from a specific table"""
    sql_parts = []

    with engine.connect() as conn:
        # Get column information
        columns_result = conn.execute(text(f"""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns
            WHERE table_name = '{table_name}'
            AND table_schema = 'public'
            ORDER BY ordinal_position
        """))

        columns = [row[0] for row in columns_result]

        if not columns:
            return []

        # Get data
        order_by = "id" if 'id' in columns else columns[0]  # Use first column if no id
        data_result = conn.execute(text(f"SELECT * FROM {table_name} ORDER BY {order_by}"))

        rows = data_result.fetchall()

        if not rows:
            return []

        # Create INSERT statements
        for row in rows:
            values = []
            for i, value in enumerate(row):
                if value is None:
                    values.append('NULL')
                elif isinstance(value, str):
                    # Escape single quotes and wrap in quotes
                    escaped_value = value.replace("'", "''")
                    values.append(f"'{escaped_value}'")
                elif isinstance(value, bool):
                    values.append('true' if value else 'false')
                elif isinstance(value, (int, float)):
                    values.append(str(value))
                elif hasattr(value, 'isoformat'):  # datetime
                    values.append(f"'{value.isoformat()}'")
                else:
                    values.append(f"'{str(value)}'")

            sql_parts.append(f"INSERT INTO {table_name} ({', '.join(columns)}) VALUES ({', '.join(values)});")

    return sql_parts

def generate_sql_file():
    """Generate the complete SQL file"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    sql_content = [
        f"-- Generated by export script at {timestamp} (ICT)",
        "-- Complete database export including all tables and data",
        "",
        "-- =============================================",
        "-- EXTENSIONS",
        "-- =============================================",
        "",
        "CREATE EXTENSION IF NOT EXISTS pg_trgm;",
        "CREATE EXTENSION IF NOT EXISTS btree_gin;",
        "",
        "-- =============================================",
        "-- TABLES AND DATA",
        "-- =============================================",
        ""
    ]

    # Get all table names
    tables = get_table_names()

    # Define the order we want to create tables (dependencies first)
    table_order = [
        # Lookup tables first
        'lu_unit', 'lu_dose_unit', 'lu_medicine_category', 'lu_medicine_line',
        'lu_pig_type', 'lu_pig_breed_line', 'lu_content_kind',
        # Core tables
        'images', 'product_pig', 'product_medicine', 'cms_content_entry',
        # User tables
        'user',
        # Junction tables
        'product_pig_image', 'product_medicine_image'
    ]

    # Add any remaining tables not in our predefined order
    for table in tables:
        if table not in table_order:
            table_order.append(table)

    # Export data for each table
    for table_name in table_order:
        if table_name in tables and table_name != 'user':  # Skip user table for now
            print(f"Exporting table: {table_name}")
            try:
                table_data = export_table_data(table_name)
                if table_data:
                    sql_content.append(f"-- Data for table: {table_name}")
                    sql_content.extend(table_data)
                    sql_content.append("")
            except Exception as e:
                print(f"Error exporting table {table_name}: {e}")
                continue

    # Write to file
    output_file = os.path.join(os.path.dirname(__file__), 'all.sql')
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(sql_content))

    print(f"SQL file generated: {output_file}")
    print(f"Total lines: {len(sql_content)}")

if __name__ == "__main__":
    generate_sql_file()