"""
Django settings for pig_farm_cms project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
from urllib.parse import parse_qs, urlparse

from django.core.exceptions import ImproperlyConfigured


def _env_int(setting_name: str, default: int) -> int:
    try:
        return int(os.environ.get(setting_name, default))
    except (TypeError, ValueError):
        return int(default)

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/


# Application definition

INSTALLED_APPS = [
    "home",
    "search",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "modelcluster",
    "taggit",
    "django_filters",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "pig_farm_cms.middleware.LargeFormSubmissionControlMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
]

ROOT_URLCONF = "pig_farm_cms.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(PROJECT_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "pig_farm_cms.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


def _normalize_engine_alias(engine: str) -> str:
    """Translate user friendly engine aliases into Django backends."""

    if not engine:
        return engine

    aliases = {
        "postgres": "django.db.backends.postgresql",
        "postgresql": "django.db.backends.postgresql",
        "pgsql": "django.db.backends.postgresql",
        "postgis": "django.contrib.gis.db.backends.postgis",
        "sqlite": "django.db.backends.sqlite3",
        "sqlite3": "django.db.backends.sqlite3",
        "mysql": "django.db.backends.mysql",
        "mysql2": "django.db.backends.mysql",
    }
    return aliases.get(engine, engine)


def _coerce_options(options: dict[str, list[str]]) -> dict[str, str | list[str]]:
    """Convert parsed query-string values into Django OPTIONS."""

    coerced: dict[str, str | list[str]] = {}
    for key, values in options.items():
        if not values:
            continue
        coerced[key] = values[0] if len(values) == 1 else values
    return coerced


def _database_from_url(url: str) -> dict[str, object]:
    parsed = urlparse(url)
    if not parsed.scheme:
        raise ImproperlyConfigured("DATABASE_URL must include a scheme (e.g. postgres://).")

    engine = _normalize_engine_alias(parsed.scheme)
    if not engine:
        raise ImproperlyConfigured("DATABASE_URL must define a supported database backend.")

    config: dict[str, object]
    if engine == "django.db.backends.sqlite3":
        path = parsed.path or ""
        if parsed.netloc:
            path = f"{parsed.netloc}{path}"

        if not path or path == "/":
            name = os.path.join(BASE_DIR, "db.sqlite3")
        else:
            if path.startswith("/") and not url.startswith("sqlite:////"):
                name = os.path.join(BASE_DIR, path.lstrip("/"))
            else:
                name = path
        config = {"ENGINE": engine, "NAME": name}
    else:
        name = parsed.path.lstrip("/")
        if not name:
            raise ImproperlyConfigured("DATABASE_URL must include a database name.")
        config = {
            "ENGINE": engine,
            "NAME": name,
            "USER": parsed.username or "",
            "PASSWORD": parsed.password or "",
            "HOST": parsed.hostname or "",
            "PORT": str(parsed.port) if parsed.port else "",
        }

    query = parse_qs(parsed.query)
    if "conn_max_age" in query:
        value = query.pop("conn_max_age")[-1]
        try:
            config["CONN_MAX_AGE"] = int(value)
        except (TypeError, ValueError) as error:
            raise ImproperlyConfigured("conn_max_age in DATABASE_URL must be an integer.") from error

    if query:
        config["OPTIONS"] = _coerce_options(query)

    return config


def _database_from_components() -> dict[str, object]:
    engine = _normalize_engine_alias(os.environ.get("DATABASE_ENGINE"))
    if not engine:
        engine = "django.db.backends.postgresql"

    if engine == "django.db.backends.sqlite3":
        name = os.environ.get("DATABASE_NAME")
        if not name or name == ":memory:":
            name = os.path.join(BASE_DIR, "db.sqlite3") if name is None else name
        elif not os.path.isabs(name):
            name = os.path.join(BASE_DIR, name)
        return {"ENGINE": engine, "NAME": name}

    config: dict[str, object] = {
        "ENGINE": engine,
        "NAME": os.environ.get("DATABASE_NAME")
        or os.environ.get("POSTGRES_DB")
        or "postgres",
        "USER": os.environ.get("DATABASE_USER")
        or os.environ.get("POSTGRES_USER")
        or "postgres",
        "PASSWORD": os.environ.get("DATABASE_PASSWORD")
        or os.environ.get("POSTGRES_PASSWORD")
        or "",
        "HOST": os.environ.get("DATABASE_HOST")
        or os.environ.get("POSTGRES_HOST")
        or "localhost",
        "PORT": str(
            os.environ.get("DATABASE_PORT")
            or os.environ.get("POSTGRES_PORT")
            or "5432"
        ),
    }

    sslmode = os.environ.get("DATABASE_SSLMODE") or os.environ.get("POSTGRES_SSLMODE")
    sslrootcert = os.environ.get("DATABASE_SSLROOTCERT") or os.environ.get("POSTGRES_SSLROOTCERT")
    options: dict[str, str] = {}
    if sslmode:
        options["sslmode"] = sslmode
    if sslrootcert:
        options["sslrootcert"] = sslrootcert
    if options:
        config["OPTIONS"] = options

    conn_max_age = os.environ.get("DATABASE_CONN_MAX_AGE")
    if conn_max_age:
        try:
            config["CONN_MAX_AGE"] = int(conn_max_age)
        except ValueError as error:
            raise ImproperlyConfigured(
                "DATABASE_CONN_MAX_AGE must be set to an integer value if provided."
            ) from error

    return config


def _build_default_database() -> dict[str, object]:
    database_url = os.environ.get("DATABASE_URL")
    if database_url:
        return _database_from_url(database_url)

    django_env = (os.environ.get("DJANGO_ENV") or "development").lower()
    if django_env in {"", "development", "dev", "local"}:
        overrides = {
            "DATABASE_ENGINE",
            "DATABASE_NAME",
            "DATABASE_USER",
            "DATABASE_PASSWORD",
            "DATABASE_HOST",
            "DATABASE_PORT",
            "POSTGRES_DB",
            "POSTGRES_USER",
            "POSTGRES_PASSWORD",
            "POSTGRES_HOST",
            "POSTGRES_PORT",
        }
        if not any(key in os.environ for key in overrides):
            return {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
            }

    return _database_from_components()


DATABASES = {"default": _build_default_database()}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, "static"),
]

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# Default storage settings
# See https://docs.djangoproject.com/en/5.2/ref/settings/#std-setting-STORAGES
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# Django sets a maximum of 1000 fields per form by default. Our current Wagtail page
# implementations are considerably smaller than that value, but we still provide headroom
# for future growth via configuration.
DATA_UPLOAD_MAX_NUMBER_FIELDS = max(1, _env_int("DATA_UPLOAD_MAX_NUMBER_FIELDS", 2_000))

# Requests that submit more than this number of fields must already be authenticated when
# they target protected endpoints. This prevents anonymous users from leveraging the higher
# global limit for abuse.
ANONYMOUS_MAX_FORM_FIELDS = _env_int("ANONYMOUS_MAX_FORM_FIELDS", 500)
ANONYMOUS_MAX_FORM_FIELDS = max(
    0,
    min(ANONYMOUS_MAX_FORM_FIELDS, DATA_UPLOAD_MAX_NUMBER_FIELDS),
)

_default_log_threshold = max(
    ANONYMOUS_MAX_FORM_FIELDS,
    int(DATA_UPLOAD_MAX_NUMBER_FIELDS * 0.75),
)
_default_log_threshold = min(_default_log_threshold, DATA_UPLOAD_MAX_NUMBER_FIELDS)

# Large submissions that stay within the allowed limits are still logged so that operations
# teams can monitor for suspicious spikes.
LARGE_FORM_LOG_THRESHOLD = max(
    1,
    min(_env_int("LARGE_FORM_LOG_THRESHOLD", _default_log_threshold), DATA_UPLOAD_MAX_NUMBER_FIELDS),
)

_protected_prefixes_env = os.environ.get(
    "LARGE_FORM_PROTECTED_PATH_PREFIXES",
    "/admin/,/django-admin/",
)
LARGE_FORM_PROTECTED_PATH_PREFIXES = tuple(
    prefix.strip()
    for prefix in _protected_prefixes_env.split(",")
    if prefix.strip()
)


# Wagtail settings

WAGTAIL_SITE_NAME = "pig_farm_cms"

# Search
# https://docs.wagtail.org/en/stable/topics/search/backends.html
WAGTAILSEARCH_BACKENDS = {
    "default": {
        "BACKEND": "wagtail.search.backends.database",
    }
}

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
WAGTAILADMIN_BASE_URL = "http://example.com"

# Allowed file extensions for documents in the document library.
# This can be omitted to allow all files, but note that this may present a security risk
# if untrusted users are allowed to upload files -
# see https://docs.wagtail.org/en/stable/advanced_topics/deploying.html#user-uploaded-files
WAGTAILDOCS_EXTENSIONS = ['csv', 'docx', 'key', 'odt', 'pdf', 'pptx', 'rtf', 'txt', 'xlsx', 'zip']


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "pig_farm.security": {
            "handlers": ["console"],
            "level": os.environ.get("PIG_FARM_SECURITY_LOG_LEVEL", "INFO"),
        },
        "django.security.SuspiciousOperation": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
    },
}
