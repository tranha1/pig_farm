-- Generated by Gemini at 2025-09-22 09:57:00 (ICT)
-- Tổng hợp từ các file:
-- 00_extensions.sql
-- 10_lookups.sql
-- 20_core_products_fixed.sql
-- 30_cms_content.sql
-- 40_images_views_triggers.sql

-- =============================================
-- SECTION 1: EXTENSIONS
-- Cài đặt các mở rộng cần thiết cho PostgreSQL để tối ưu tìm kiếm và chỉ mục.
-- =============================================

CREATE EXTENSION IF NOT EXISTS pg_trgm;
CREATE EXTENSION IF NOT EXISTS btree_gin;


-- =============================================
-- SECTION 2: LOOKUP TABLES
-- Các bảng nhỏ chứa dữ liệu dùng chung (danh mục, loại, đơn vị,...)
-- để đảm bảo tính nhất quán và tránh lặp lại dữ liệu.
-- =============================================

-- Đơn vị bán (con, hộp, chai, kg...)
CREATE TABLE IF NOT EXISTS lu_unit (
  id    SMALLSERIAL PRIMARY KEY,
  code  TEXT UNIQUE NOT NULL,
  label TEXT NOT NULL
);

-- Đơn vị liều (ml, viên, g...)
CREATE TABLE IF NOT EXISTS lu_dose_unit (
  id    SMALLSERIAL PRIMARY KEY,
  code  TEXT UNIQUE NOT NULL,
  label TEXT NOT NULL
);

-- Danh mục/nhóm thuốc (kháng sinh tiêm, bổ trợ tiêm, nước, bột, sát trùng...)
CREATE TABLE IF NOT EXISTS lu_medicine_category (
  id    SMALLSERIAL PRIMARY KEY,
  slug  TEXT UNIQUE NOT NULL,
  name  TEXT UNIQUE NOT NULL
);

-- Dòng thuốc (product line)
CREATE TABLE IF NOT EXISTS lu_medicine_line (
  id    SMALLSERIAL PRIMARY KEY,
  name  TEXT UNIQUE NOT NULL
);

-- Loại lợn
CREATE TABLE IF NOT EXISTS lu_pig_type (
  id    SMALLSERIAL PRIMARY KEY,
  code  TEXT UNIQUE NOT NULL,   -- 'breeding' | 'sow'
  label TEXT NOT NULL
);

-- Dòng/giống lợn (Axiom, Đan Mạch, Land/York...)
CREATE TABLE IF NOT EXISTS lu_pig_breed_line (
  id    SMALLSERIAL PRIMARY KEY,
  name  TEXT UNIQUE NOT NULL
);

-- Loại nội dung (dùng cho nguồn chung Liên hệ/Tin tức/Quy trình)
CREATE TABLE IF NOT EXISTS lu_content_kind (
  id    SMALLSERIAL PRIMARY KEY,
  code  TEXT UNIQUE NOT NULL,   -- 'contact' | 'news' | 'process'
  label TEXT NOT NULL
);

-- Seed (khởi tạo) dữ liệu mặc định cho các bảng lookup (an toàn khi chạy lại)
INSERT INTO lu_content_kind (code, label) VALUES
  ('contact','Liên hệ'), ('news','Tin tức'), ('process','Quy trình')
ON CONFLICT (code) DO NOTHING;

INSERT INTO lu_pig_type (code, label) VALUES
  ('breeding','Lợn giống'), ('sow','Lợn cái')
ON CONFLICT (code) DO NOTHING;


-- =============================================
-- SECTION 3: CORE DATA TABLES
-- Các bảng chứa dữ liệu chính của hệ thống: sản phẩm và nội dung.
-- =============================================

-- Bảng sản phẩm Lợn
CREATE TABLE IF NOT EXISTS product_pig (
  id             BIGSERIAL PRIMARY KEY,
  pig_type_id    SMALLINT NOT NULL REFERENCES lu_pig_type(id),
  name           TEXT NOT NULL,
  breed_line_id  SMALLINT REFERENCES lu_pig_breed_line(id),
  unit_id        SMALLINT REFERENCES lu_unit(id),
  price          NUMERIC(14,2),
  note           TEXT,
  is_featured    BOOLEAN NOT NULL DEFAULT FALSE,
  cover_image_id BIGINT,                              -- Tham chiếu lỏng tới wagtailimages_image.id
  slug           TEXT,
  published_at   TIMESTAMPTZ,
  is_published   BOOLEAN NOT NULL DEFAULT FALSE,
  is_deleted     BOOLEAN NOT NULL DEFAULT FALSE,
  created_at     TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at     TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uq_pig_type_name') THEN
    ALTER TABLE product_pig ADD CONSTRAINT uq_pig_type_name UNIQUE (pig_type_id, name);
  END IF;
END $$;

-- Bảng sản phẩm Thuốc
CREATE TABLE IF NOT EXISTS product_medicine (
  id                       BIGSERIAL PRIMARY KEY,
  name                     TEXT NOT NULL,
  category_id              SMALLINT REFERENCES lu_medicine_category(id),
  line_id                  SMALLINT REFERENCES lu_medicine_line(id),
  ingredients              TEXT,
  indications              TEXT,
  packaging                TEXT,
  unit_id                  SMALLINT REFERENCES lu_unit(id),
  price_unit               NUMERIC(14,2),
  price_total              NUMERIC(14,2),
  dose_unit_id             SMALLINT REFERENCES lu_dose_unit(id),
  price_per_dose           NUMERIC(14,2),
  support_price_per_dose   NUMERIC(14,2),
  is_featured              BOOLEAN NOT NULL DEFAULT FALSE,
  cover_image_id           BIGINT,           -- Tham chiếu lỏng tới wagtailimages_image.id
  slug                     TEXT,
  published_at             TIMESTAMPTZ,
  is_published             BOOLEAN NOT NULL DEFAULT FALSE,
  is_deleted               BOOLEAN NOT NULL DEFAULT FALSE,
  created_at               TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at               TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uq_med_name') THEN
    ALTER TABLE product_medicine ADD CONSTRAINT uq_med_name UNIQUE (name);
  END IF;
END $$;

-- Bảng nội dung chung (Tin tức, Liên hệ, Quy trình)
CREATE TABLE IF NOT EXISTS cms_content_entry (
  id             BIGSERIAL PRIMARY KEY,
  kind_id        SMALLINT NOT NULL REFERENCES lu_content_kind(id),
  slug           TEXT NOT NULL,
  title          TEXT NOT NULL,
  summary        TEXT,
  body_json      JSONB,
  body_html      TEXT,
  video_url      TEXT,
  external_url   TEXT,
  cover_image_id BIGINT,           -- Tham chiếu lỏng tới wagtailimages_image.id
  author_name    TEXT,
  seo_title      TEXT,
  seo_desc       TEXT,
  published_at   TIMESTAMPTZ,
  is_published   BOOLEAN NOT NULL DEFAULT FALSE,
  is_deleted     BOOLEAN NOT NULL DEFAULT FALSE,
  created_at     TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at     TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT uq_cms_kind_slug UNIQUE (kind_id, slug)
);


-- =============================================
-- SECTION 4: IMAGE RELATION TABLES
-- Bảng trung gian để quản lý thư viện ảnh cho mỗi sản phẩm.
-- =============================================

CREATE TABLE IF NOT EXISTS product_pig_image (
  pig_id   BIGINT NOT NULL REFERENCES product_pig(id) ON DELETE CASCADE,
  image_id BIGINT NOT NULL,   -- wagtailimages_image.id
  sort     INT NOT NULL DEFAULT 0,
  PRIMARY KEY (pig_id, image_id)
);

CREATE TABLE IF NOT EXISTS product_medicine_image (
  medicine_id BIGINT NOT NULL REFERENCES product_medicine(id) ON DELETE CASCADE,
  image_id    BIGINT NOT NULL,  -- wagtailimages_image.id
  sort        INT NOT NULL DEFAULT 0,
  PRIMARY KEY (medicine_id, image_id)
);


-- =============================================
-- SECTION 5: INDEXES
-- Các chỉ mục để tối ưu hóa hiệu năng truy vấn (lọc, tìm kiếm, sắp xếp).
-- =============================================

-- Indexes cho product_pig
CREATE INDEX IF NOT EXISTS idx_pig_pub
  ON product_pig (pig_type_id, is_published, is_featured, published_at DESC, id DESC);
CREATE INDEX IF NOT EXISTS idx_pig_name_trgm
  ON product_pig USING gin (LOWER(name) gin_trgm_ops);
CREATE INDEX IF NOT EXISTS idx_pig_image_sort ON product_pig_image (pig_id, sort);

-- Indexes cho product_medicine
CREATE INDEX IF NOT EXISTS idx_med_pub_time
  ON product_medicine (is_published, category_id, is_featured, published_at DESC, id DESC);
CREATE INDEX IF NOT EXISTS idx_med_name_trgm
  ON product_medicine USING gin (LOWER(name) gin_trgm_ops);
CREATE INDEX IF NOT EXISTS idx_med_pack_trgm
  ON product_medicine USING gin (LOWER(packaging) gin_trgm_ops);
CREATE INDEX IF NOT EXISTS idx_med_image_sort ON product_medicine_image (medicine_id, sort);

-- Indexes cho cms_content_entry
CREATE INDEX IF NOT EXISTS idx_cms_kind_pub_time
  ON cms_content_entry (kind_id, is_published, published_at DESC, id DESC);
CREATE INDEX IF NOT EXISTS idx_cms_slug_trgm
  ON cms_content_entry USING gin (LOWER(slug) gin_trgm_ops);
CREATE INDEX IF NOT EXISTS idx_cms_title_trgm
  ON cms_content_entry USING gin (LOWER(title) gin_trgm_ops);


-- =============================================
-- SECTION 6: VIEWS
-- Các khung nhìn (view) để đơn giản hóa việc truy vấn từ phía front-end,
-- gom sẵn các thông tin từ bảng lookup.
-- =============================================

CREATE OR REPLACE VIEW v_pig_public AS
SELECT p.id,
       COALESCE(p.slug, regexp_replace(LOWER(p.name), '\s+', '-', 'g')) AS slug,
       p.name,
       t.label  AS pig_type,
       bl.name  AS breed_line,
       u.label  AS unit,
       p.price,
       p.is_featured,
       p.cover_image_id,
       p.published_at,
       p.note
FROM product_pig p
LEFT JOIN lu_pig_type       t  ON t.id  = p.pig_type_id
LEFT JOIN lu_pig_breed_line bl ON bl.id = p.breed_line_id
LEFT JOIN lu_unit           u  ON u.id  = p.unit_id
WHERE p.is_published = TRUE
  AND p.is_deleted = FALSE;

CREATE OR REPLACE VIEW v_medicine_public AS
SELECT m.id,
       COALESCE(m.slug, regexp_replace(LOWER(m.name), '\s+', '-', 'g')) AS slug,
       m.name,
       cat.name   AS category,
       line.name  AS product_line,
       u.label    AS unit,
       du.label   AS dose_unit,
       m.ingredients,
       m.indications,
       m.packaging,
       m.price_unit,
       m.price_total,
       m.price_per_dose,
       m.support_price_per_dose,
       m.is_featured,
       m.cover_image_id,
       m.published_at
FROM product_medicine m
LEFT JOIN lu_medicine_category cat ON cat.id = m.category_id
LEFT JOIN lu_medicine_line     line ON line.id = m.line_id
LEFT JOIN lu_unit               u   ON u.id   = m.unit_id
LEFT JOIN lu_dose_unit          du  ON du.id  = m.dose_unit_id
WHERE m.is_published = TRUE
  AND m.is_deleted = FALSE;


-- =============================================
-- SECTION 7: FUNCTIONS AND TRIGGERS
-- Các hàm và trigger để tự động hóa các tác vụ và ràng buộc logic.
-- =============================================

-- Function: Tự động cập nhật trường `updated_at` khi một bản ghi được sửa.
CREATE OR REPLACE FUNCTION touch_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END; $$ LANGUAGE plpgsql;

-- Function: Đảm bảo chỉ có một nội dung 'Liên hệ' (contact) được publish.
CREATE OR REPLACE FUNCTION enforce_singleton_contact()
RETURNS TRIGGER AS $$
DECLARE
  contact_kind_id SMALLINT;
  conflict_cnt    INT;
BEGIN
  SELECT id INTO contact_kind_id
  FROM lu_content_kind
  WHERE code = 'contact'
  LIMIT 1;

  IF NEW.is_published IS TRUE AND NEW.kind_id = contact_kind_id THEN
    SELECT COUNT(*) INTO conflict_cnt
    FROM cms_content_entry
    WHERE kind_id = contact_kind_id
      AND is_published = TRUE
      AND id <> COALESCE(NEW.id, -1);

    IF conflict_cnt > 0 THEN
      RAISE EXCEPTION 'Only one published Contact entry is allowed';
    END IF;
  END IF;
  RETURN NEW;
END; $$ LANGUAGE plpgsql;

-- Gán trigger `touch_updated_at` vào các bảng
DROP TRIGGER IF EXISTS trg_touch_cms ON cms_content_entry;
CREATE TRIGGER trg_touch_cms
BEFORE UPDATE ON cms_content_entry
FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

DROP TRIGGER IF EXISTS trg_touch_pig ON product_pig;
CREATE TRIGGER trg_touch_pig
BEFORE UPDATE ON product_pig
FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

DROP TRIGGER IF EXISTS trg_touch_med ON product_medicine;
CREATE TRIGGER trg_touch_med
BEFORE UPDATE ON product_medicine
FOR EACH ROW EXECUTE FUNCTION touch_updated_at();

-- Gán trigger `enforce_singleton_contact` vào bảng cms_content_entry
DROP TRIGGER IF EXISTS trg_singleton_contact_ins ON cms_content_entry;
CREATE TRIGGER trg_singleton_contact_ins
BEFORE INSERT ON cms_content_entry
FOR EACH ROW EXECUTE FUNCTION enforce_singleton_contact();

DROP TRIGGER IF EXISTS trg_singleton_contact_upd ON cms_content_entry;
CREATE TRIGGER trg_singleton_contact_upd
BEFORE UPDATE ON cms_content_entry
FOR EACH ROW EXECUTE FUNCTION enforce_singleton_contact();

-- =============================================
-- END OF SCRIPT
-- =============================================
